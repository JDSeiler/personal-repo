'''Binary Search in Python'''

# A whole bunch of numbers to serve as a placeholder dataset
testData = [1, 3, 12, 16, 20, 27, 30, 32, 33, 36, 38, 39, 40, 41, 42, 52, 55, 56, 61, 67, 71, 81, 85, 86, 94, 97, 98, 102, 106, 108, 113, 117, 119, 123, 127, 131, 133, 134, 136, 
            142, 143, 148, 150, 151, 152, 154, 156, 157, 164, 166, 167, 168, 171, 173, 174, 176, 180, 182, 184, 192, 193, 194, 199, 203, 204, 207, 208, 213, 214, 215, 220, 224, 225, 226, 227, 
            230, 236, 237, 238, 242, 243, 244, 245, 262, 270, 276, 282, 284, 285, 292, 298, 299, 300, 302, 304, 306, 307, 311, 312, 315, 327, 329, 331, 332, 333, 334, 341, 342, 343, 347, 348, 
            349, 350, 351, 355, 358, 360, 365, 367, 371, 380, 382, 385, 386, 388, 391, 398, 401, 409, 426, 427, 428, 441, 442, 445, 448, 449, 467, 473, 479, 483, 496, 497, 502, 503, 505, 507, 
            509, 513, 516, 522, 525, 531, 532, 535, 538, 541, 552, 554, 556, 561, 563, 568, 573, 576, 577, 578, 580, 582, 583, 585, 587, 590, 592, 593, 594, 604, 605, 608, 609, 616, 617, 620, 
            622, 626, 627, 629, 634, 635, 636, 643, 644, 645, 656, 657, 665, 668, 673, 677, 691, 695, 697, 700, 707, 728, 736, 740, 742, 744, 746, 752, 753, 755, 766, 768, 775, 778, 779, 785, 
            786, 787, 788, 793, 796, 801, 802, 807, 808, 809, 812, 813, 814, 818, 822, 824, 825, 831, 833, 835, 836, 837, 854, 863, 865, 868, 872, 873, 874, 883, 885, 886, 892, 893, 894, 896, 
            907, 914, 917, 930, 935, 937, 943, 945, 948, 951, 952, 953, 957, 959, 960, 961, 964, 971, 977, 982, 984, 990, 992, 994, 998, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1021, 1024, 
            1029, 1030, 1032, 1041, 1042, 1043, 1047, 1054, 1061, 1064, 1069, 1071, 1073, 1076, 1077, 1081, 1083, 1091, 1095, 1097, 1101, 1105, 1107, 1108, 1110, 1111, 1114, 1115, 1116, 1119, 
            1120, 1124, 1127, 1134, 1136, 1139, 1140, 1147, 1148, 1151, 1154, 1158, 1159, 1163, 1169, 1171, 1175, 1176, 1180, 1183, 1185, 1187, 1189, 1194, 1195, 1197, 1198, 1199, 1203, 1205, 
            1206, 1211, 1219, 1221, 1222, 1224, 1232, 1238, 1242, 1247, 1248, 1249, 1250, 1252, 1255, 1259, 1261, 1270, 1273, 1276, 1284, 1286, 1288, 1290, 1293, 1294, 1296, 1297, 1301, 1304, 
            1309, 1311, 1313, 1314, 1315, 1318, 1326, 1331, 1333, 1341, 1344, 1345, 1346, 1353, 1358, 1371, 1373, 1375, 1376, 1378, 1380, 1381, 1382, 1385, 1388, 1391, 1396, 1402, 1411, 1412, 
            1414, 1415, 1418, 1430, 1442, 1445, 1446, 1448, 1449, 1450, 1453, 1458, 1459, 1466,1470, 1472, 1473, 1474, 1478, 1480, 1485, 1486, 1487, 1488, 1490, 1494, 1495, 1496, 1505, 1509, 
            1510, 1515, 1517, 1518, 1524, 1527, 1531, 1532, 1533, 1539, 1540, 1544, 1545, 1546, 1549, 1550, 1554, 1555, 1557, 1559, 1563, 1574, 1575, 1576, 1584, 1593, 1594, 1595, 1597, 1599, 
            1601, 1604, 1612, 1613, 1616, 1617, 1622, 1624, 1634, 1635, 1636, 1637, 1649, 1651, 1653, 1657, 1658, 1660, 1661, 1668, 1669, 1671, 1675, 1680, 1686, 1695, 1701, 1702, 1706, 1707, 
            1711, 1717, 1718, 1719, 1724, 1728, 1731, 1732, 1740, 1746, 1750, 1755, 1760, 1763, 1765, 1766, 1772, 1774, 1775, 1777, 1778, 1781, 1782, 1783, 1784, 1786, 1788, 1796, 1798, 1799, 
            1807, 1811, 1812, 1822, 1823, 1829, 1833, 1837, 1838, 1841, 1842, 1850, 1855, 1856, 1857, 1859, 1866, 1871, 1872, 1878, 1884, 1888, 1893, 1900, 1902, 1903, 1905, 1916, 1918, 1921, 
            1924, 1928, 1932, 1934, 1936, 1938, 1945, 1948, 1949, 1951, 1954, 1956, 1961, 1962, 1964, 1973, 1974, 1978, 1984, 1986, 1991, 1995, 1997]


def binarySearch(query, array):
    # Starting variables
    loBound = 0
    hiBound = len(array)
    index = len(array) // 2
    found = False
    safety = 0
    # Main loop
    while found == False:
        if array[index] > query:
            hiBound = index 
            index = (hiBound - loBound) // 2
            # If the query is not in the array, this block will stop the algorithm from running forever
            if hiBound - loBound == 1:
                safety += 1
                if safety > 2:
                    return "Search Failed: Element not found"

        elif array[index] < query:
            loBound = index
            index =  index + ((hiBound - loBound) // 2)

            if hiBound - loBound == 1:
                safety += 1
                if safety > 2:
                    return "Search Failed: Element not found"

        elif array[index] == query:
            found = True
            return index 


# The test below completed in .108 seconds
for num in testData:
    print(binarySearch(num, testData))
